package com.yeahmobi.loadbalance_manager.api;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSON;

/**
 * @author atell.wu
 */
public class AbstractController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractController.class);

    protected String json(Handler handler) {
        JsonResult result = new JsonResult();

        try {
            handler.handle(result);

            result.setErrorCode(JsonResult.CODE_SUCCESS);
            result.setMsg("success");
        } catch (IllegalArgumentException e) {
            throw e;// 交给Validate框架去处理
        } catch (Exception e) {
            result.setErrorCode(JsonResult.CODE_SERVER_ERROR);
            result.setMsg(e.getMessage());
            result.setResult("");
            LOGGER.error(e.getMessage(), e);
        }
        return JSON.toJSONString(result);
    }

    public static class JsonResult {

        public static final String ERROR_CODE        = "errorCode";
        public static final int    CODE_SUCCESS      = 0;
        public static final int    CODE_PARAM_ERROR  = 1;
        public static final int    CODE_SERVER_ERROR = 2;

        public static final String MSG               = "msg";

        private int                errorCode;
        private String             msg;
        private Object             result;

        public int getErrorCode() {
            return this.errorCode;
        }

        public void setErrorCode(int errorCode) {
            this.errorCode = errorCode;
        }

        public String getMsg() {
            return this.msg;
        }

        public void setMsg(String msg) {
            this.msg = msg;
        }

        public Object getResult() {
            return this.result;
        }

        public void setResult(Object result) {
            this.result = result;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = (prime * result) + this.errorCode;
            result = (prime * result) + ((this.msg == null) ? 0 : this.msg.hashCode());
            result = (prime * result) + ((this.result == null) ? 0 : this.result.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null) return false;
            if (getClass() != obj.getClass()) return false;
            JsonResult other = (JsonResult) obj;
            if (this.errorCode != other.errorCode) return false;
            if (this.msg == null) {
                if (other.msg != null) return false;
            } else if (!this.msg.equals(other.msg)) return false;
            if (this.result == null) {
                if (other.result != null) return false;
            } else if (!this.result.equals(other.result)) return false;
            return true;
        }

    }

}
